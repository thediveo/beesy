// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package rootpidns_test

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type beeTaskInfo struct {
	Pid        int32
	LocalPid   int32
	Tid        int32
	LocalTid   int32
	Fullname   [16]int8
	Callername [16]int8
}

// loadBee returns the embedded CollectionSpec for bee.
func loadBee() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BeeBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load bee: %w", err)
	}

	return spec, err
}

// loadBeeObjects loads bee and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*beeObjects
//	*beePrograms
//	*beeMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBeeObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBee()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// beeSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type beeSpecs struct {
	beeProgramSpecs
	beeMapSpecs
	beeVariableSpecs
}

// beeProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type beeProgramSpecs struct {
	DumpTaskInfo *ebpf.ProgramSpec `ebpf:"dump_task_info"`
}

// beeMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type beeMapSpecs struct {
}

// beeVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type beeVariableSpecs struct {
	Meh *ebpf.VariableSpec `ebpf:"_meh"`
}

// beeObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBeeObjects or ebpf.CollectionSpec.LoadAndAssign.
type beeObjects struct {
	beePrograms
	beeMaps
	beeVariables
}

func (o *beeObjects) Close() error {
	return _BeeClose(
		&o.beePrograms,
		&o.beeMaps,
	)
}

// beeMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBeeObjects or ebpf.CollectionSpec.LoadAndAssign.
type beeMaps struct {
}

func (m *beeMaps) Close() error {
	return _BeeClose()
}

// beeVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadBeeObjects or ebpf.CollectionSpec.LoadAndAssign.
type beeVariables struct {
	Meh *ebpf.Variable `ebpf:"_meh"`
}

// beePrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBeeObjects or ebpf.CollectionSpec.LoadAndAssign.
type beePrograms struct {
	DumpTaskInfo *ebpf.Program `ebpf:"dump_task_info"`
}

func (p *beePrograms) Close() error {
	return _BeeClose(
		p.DumpTaskInfo,
	)
}

func _BeeClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bee_bpfel_test.o
var _BeeBytes []byte
